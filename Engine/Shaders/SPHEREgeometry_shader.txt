#version 150 core

layout(triangles) in;
layout(triangle_strip, max_vertices = 256) out;

uniform mat4 perspective;
uniform mat4 view;

uniform vec3 center;
uniform float radius;
const float resolution = 14;
const float coverage = 360;

out vec3 bary_Coord;
vec3 b = vec3(0,0,0);;
void main()
{
	
	gl_PointSize = 1.5f;
	int inc = 0;
	float gamma = 0.0f, theta = 0.0f, x , y , z;

	while(gamma <= coverage){
	theta = 0.0f;
	while(theta <= coverage)
	{
		x = center.x + (radius * cos(theta*3.14/180) * sin(gamma*3.14/180));
		z = center.z - (radius * cos(theta*3.14/180) * cos(gamma*3.14/180));
		y = center.y + (radius * sin(theta*3.14/180));
		gl_Position = perspective*view*vec4(x,y,z,1.0f);
		if(inc < 3){b[inc] = 1.0f; bary_Coord = b;}
		else{b[int(mod(inc,3))] = 1.0f; bary_Coord = b;}

		EmitVertex();
		inc++;
		b = vec3(0.0f);

		x = center.x + (radius * cos(theta*3.14/180) * sin((gamma+(coverage/resolution))*3.14/180));
		z = center.z - (radius * cos(theta*3.14/180) * cos((gamma+(coverage/resolution))*3.14/180));
		y = center.y + (radius * sin(theta*3.14/180));
		gl_Position = perspective*view*vec4(x,y,z,1.0f);
		if(inc < 3){b[inc] = 1.0f; bary_Coord = b;}
		else{b[int(mod(inc,3))] = 1.0f; bary_Coord = b;}
		EmitVertex();
		inc++;

		theta += coverage/resolution;
	}
	EndPrimitive();
	gamma += coverage/resolution;
	}

	EndPrimitive();
}